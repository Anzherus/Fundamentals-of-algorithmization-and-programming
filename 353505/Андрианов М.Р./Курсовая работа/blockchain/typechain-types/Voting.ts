/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Voting {
  export type CandidateStruct = {
    id: BigNumberish;
    name: string;
    party: string;
    voteCount: BigNumberish;
  };

  export type CandidateStructOutput = [
    id: bigint,
    name: string,
    party: string,
    voteCount: bigint
  ] & { id: bigint; name: string; party: string; voteCount: bigint };
}

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "candidates"
      | "candidatesCount"
      | "endVoting"
      | "getCandidate"
      | "startVoting"
      | "totalVotes"
      | "verifyVoter"
      | "vote"
      | "votingEndTime"
      | "votingStartTime"
      | "votingStarted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CandidateAdded"
      | "Voted"
      | "VotingEnded"
      | "VotingStarted"
      | "WinnerDeclared"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "candidatesCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endVoting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "votingEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingStarted",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidatesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingStarted",
    data: BytesLike
  ): Result;
}

export namespace CandidateAddedEvent {
  export type InputTuple = [
    candidateID: BigNumberish,
    name: string,
    party: string
  ];
  export type OutputTuple = [candidateID: bigint, name: string, party: string];
  export interface OutputObject {
    candidateID: bigint;
    name: string;
    party: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [voter: AddressLike, candidateID: BigNumberish];
  export type OutputTuple = [voter: string, candidateID: bigint];
  export interface OutputObject {
    voter: string;
    candidateID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingEndedEvent {
  export type InputTuple = [endTime: BigNumberish];
  export type OutputTuple = [endTime: bigint];
  export interface OutputObject {
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingStartedEvent {
  export type InputTuple = [
    startTime: BigNumberish,
    durationMinutes: BigNumberish
  ];
  export type OutputTuple = [startTime: bigint, durationMinutes: bigint];
  export interface OutputObject {
    startTime: bigint;
    durationMinutes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDeclaredEvent {
  export type InputTuple = [
    candidateID: BigNumberish,
    name: string,
    party: string,
    voteCount: BigNumberish,
    percent: BigNumberish
  ];
  export type OutputTuple = [
    candidateID: bigint,
    name: string,
    party: string,
    voteCount: bigint,
    percent: bigint
  ];
  export interface OutputObject {
    candidateID: bigint;
    name: string;
    party: string;
    voteCount: bigint;
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<
    [name: string, party: string],
    [void],
    "nonpayable"
  >;

  candidates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        id: bigint;
        name: string;
        party: string;
        voteCount: bigint;
      }
    ],
    "view"
  >;

  candidatesCount: TypedContractMethod<[], [bigint], "view">;

  endVoting: TypedContractMethod<[], [void], "nonpayable">;

  getCandidate: TypedContractMethod<
    [candidateID: BigNumberish],
    [Voting.CandidateStructOutput],
    "view"
  >;

  startVoting: TypedContractMethod<
    [durationMinutes: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalVotes: TypedContractMethod<[], [bigint], "view">;

  verifyVoter: TypedContractMethod<[voter: AddressLike], [boolean], "view">;

  vote: TypedContractMethod<[candidateID: BigNumberish], [void], "nonpayable">;

  votingEndTime: TypedContractMethod<[], [bigint], "view">;

  votingStartTime: TypedContractMethod<[], [bigint], "view">;

  votingStarted: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<[name: string, party: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        id: bigint;
        name: string;
        party: string;
        voteCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "candidatesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCandidate"
  ): TypedContractMethod<
    [candidateID: BigNumberish],
    [Voting.CandidateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "startVoting"
  ): TypedContractMethod<[durationMinutes: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyVoter"
  ): TypedContractMethod<[voter: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[candidateID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "votingEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingStarted"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "CandidateAdded"
  ): TypedContractEvent<
    CandidateAddedEvent.InputTuple,
    CandidateAddedEvent.OutputTuple,
    CandidateAddedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VotingEnded"
  ): TypedContractEvent<
    VotingEndedEvent.InputTuple,
    VotingEndedEvent.OutputTuple,
    VotingEndedEvent.OutputObject
  >;
  getEvent(
    key: "VotingStarted"
  ): TypedContractEvent<
    VotingStartedEvent.InputTuple,
    VotingStartedEvent.OutputTuple,
    VotingStartedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDeclared"
  ): TypedContractEvent<
    WinnerDeclaredEvent.InputTuple,
    WinnerDeclaredEvent.OutputTuple,
    WinnerDeclaredEvent.OutputObject
  >;

  filters: {
    "CandidateAdded(uint256,string,string)": TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;
    CandidateAdded: TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;

    "Voted(address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VotingEnded(uint256)": TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;
    VotingEnded: TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;

    "VotingStarted(uint256,uint256)": TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
    VotingStarted: TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;

    "WinnerDeclared(uint256,string,string,uint256,uint256)": TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
    WinnerDeclared: TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
  };
}
